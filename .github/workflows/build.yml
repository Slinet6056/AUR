name: Build and Update Repository

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  get-changed-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.changed-pkgbuilds.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: "recursive"
      - name: Get changed PKGBUILD files
        id: changed-pkgbuilds
        run: |
          git submodule update --init --recursive
          git fetch --all

          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            last_run=$(git log -1 --format=%ct)
            changed_pkgbuilds=$(git diff --name-only @{${last_run}} HEAD -- . ':(exclude).gitmodules' | grep 'src/.*/PKGBUILD' || true)
          else
            changed_pkgbuilds=$(git diff --name-only HEAD^ HEAD -- . ':(exclude).gitmodules' | grep 'src/.*/PKGBUILD' || true)
          fi

          submodule_changes=$(git submodule foreach --quiet 'git diff --quiet || echo $name')
          for submodule in $submodule_changes; do
            if [[ -f "$submodule/PKGBUILD" ]]; then
              changed_pkgbuilds+=$'\n'"$submodule/PKGBUILD"
            fi
          done

          if [ -n "$changed_pkgbuilds" ]; then
            changed_packages=$(echo "$changed_pkgbuilds" | xargs -n1 dirname | xargs -n1 basename | sort -u | jq -R -s -c 'split("\n")[:-1]')
            echo "packages=$changed_packages" >> $GITHUB_OUTPUT
          else
            echo "packages=[]" >> $GITHUB_OUTPUT
          fi

  build-and-update:
    needs: get-changed-packages
    if: needs.get-changed-packages.outputs.packages != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkg: ${{ fromJSON(needs.get-changed-packages.outputs.packages) }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Initialize matrix lock
        if: ${{ matrix.pkg == fromJSON(needs.get-changed-packages.outputs.packages)[0] }}
        uses: rakles/matrix-lock@main
        with:
          step: init
          order: "${{ join(fromJSON(needs.get-changed-packages.outputs.packages), ',') }}"

      - name: Wait for matrix lock
        uses: rakles/matrix-lock@main
        with:
          step: wait
          id: ${{ matrix.pkg }}

      - name: Pull latest changes
        run: |
          git pull

      - name: Build package and update repository
        uses: Slinet6056/archpkg-build@dev
        with:
          package_name: ${{ matrix.pkg }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
          pkgs_path: src
          repo_name: slinet
          repo_path: pkgs

      - name: Commit and push
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pkgs/
          git commit -m "Update repository: ${{ matrix.pkg }}" && git push

      - name: Continue matrix lock
        uses: rakles/matrix-lock@main
        with:
          step: continue
          id: ${{ matrix.pkg }}
